<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xianbester.service.dao.RecordMapper">
    <resultMap id="BaseResultMap" type="com.xianbester.service.entity.CameraRecordEntity">
        <id column="c_record_id" jdbcType="INTEGER" property="cRecordId"/>
        <result column="camera_id" jdbcType="INTEGER" property="cameraId"/>
        <result column="cr_add_time" jdbcType="TIMESTAMP" property="crAddTime"/>
        <result column="cr_update_time" jdbcType="TIMESTAMP" property="crUpdateTime"/>
        <result column="cr_male_number" jdbcType="INTEGER" property="crMaleNumber"/>
        <result column="cr_female_number" javaType="INTEGER" property="crFemaleNumber"/>
    </resultMap>

    <resultMap id="CountResultMap" type="com.xianbester.service.entity.CountEntity">
        <result column="Id" property="id"/>
        <result column="Result" property="result"/>
    </resultMap>

    <sql id="Base_Column_List">
        c_record_id,
        camera_id,
        cr_add_time,
        cr_update_time,
        cr_male_number,
        cr_female_number
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from camera_record
        where c_record_id = #{cRecordId}
    </select>

    <select id="batchSelectNewRecords" parameterType="java.util.List" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM camera_record
        WHERE camera_id
        IN
        <foreach collection="cameraIdList" item="cameraId" separator="," index="index" open="(" close=")">
            #{cameraId}
        </foreach>
        ORDER BY cr_update_time DESC
        limit ${cameraIdList.size}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from camera_record
        where c_record_id = #{cRecordId}
    </delete>

    <insert id="insert" parameterType="map" useGeneratedKeys="true" keyProperty="recode.cRecordId">
        insert into camera_record (camera_id,
                                   cr_add_time,
                                   cr_update_time,
                                   cr_male_number,
                                   cr_female_number
          )
        values (#{record.cameraId},
                NOW(),
                NOW(),
                #{record.crMaleNumber},
                #{record.crFemaleNumber}
          )
    </insert>

    <insert id="insertSelective" parameterType="map">
        insert into camera_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cRecordId != null">
                c_record_id,
            </if>
            <if test="cameraId != null">
                camera_id,
            </if>
            <if test="cr_add_time != null">
                cr_add_time,
            </if>
            <if test="cr_update_time != null">
                cr_update_time,
            </if>
            <if test="cr_male_number != null">
                cr_male_number,
            </if>
            <if test="cr_female_number != null">
                cr_female_number,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cRecordId != null">
                #{cRecordId},
            </if>
            <if test="cameraId != null">
                #{cameraId},
            </if>
            <if test="crAddTime != null">
                #{crAddTime},
            </if>
            <if test="crUpdateTime != null">
                #{crUpdateTime}
            </if>
            <if test="crMaleNumber != null">
                #{crMaleNumber}
            </if>
            <if test="crFemaleNumber != null">
                #{crFemaleNumber}
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="map">
        update camera_record
        <set>
            <if test="record.cameraId != null">
                camera_id = #{record.cameraId},
            </if>
            <if test="record.crUpdateTime != null">
                cr_update_time = NOW(),
            </if>
            <if test="record.crMaleNumber != null">
                cr_male_number = #{record.crMaleNumber}
            </if>
            <if test="record.crFemaleNumber != null">
                cr_female_number = #{record.crFemaleNumber}
            </if>
        </set>
        where c_record_id = #{record.cRecordId}
    </update>

    <update id="updateByPrimaryKey" parameterType="map">
        update camera_record
        set camera_id = #{cameraId},
            cr_add_time = #{crAddTime},
            cr_update_time = #{crUpdateTime},
            cr_male_number = #{crMaleNumber},
            cr_female_number = #{crFemaleNumber}
        where c_record_id = #{cRecordId}
    </update>

    <select id="queryVisitorsByTime" parameterType="map" resultMap="CountResultMap">
        select SUM(cr_male_number) as Id, SUM(cr_female_number) as Result
        from camera_record
        WHERE cr_add_time BETWEEN #{startTime} AND #{endTime}
    </select>

    <select id="queryParticipantByTime" parameterType="map" resultMap="CountResultMap">
        SELECT SUM(a.cr_male_number) AS Id, SUM(a.cr_female_number) AS Result
        FROM camera_record a, (SELECT camera_id AS cameraId
                             FROM camera
                             WHERE area_id = #{areaId}) b
        WHERE a.camera_id = b.CameraId
        AND a.cr_add_time BETWEEN #{start} AND #{end}
    </select>

</mapper>
